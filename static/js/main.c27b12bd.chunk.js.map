{"version":3,"sources":["people.js","addPerson.js","App.js","serviceWorker.js","index.js"],"names":["People","props","console","log","arrayOfPeople","listOfPeoplehtml","map","person","age","className","key","id","name","favoriteFood","AddPerson","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","addMeLoser","addPerson","Math","random","newListOfPeople","listOfPeople","onSubmit","this","htmlFor","type","onChange","Component","App","favoritFood","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uOAqCeA,EAnCA,SAACC,GAIRC,QAAQC,IAAIF,GAJM,IAOXG,EAAiBH,EAAjBG,cAEPF,QAAQC,IAAIC,GAEZ,IAAMC,EAAmBD,EAAcE,KAAI,SAAAC,GAEvC,OAAOA,EAAOC,IAAM,GAChB,yBAAKC,UAAU,SAASC,IAAKH,EAAOI,IAChC,sCAAYJ,EAAOK,MACnB,qCAAWL,EAAOC,KAClB,+CAAqBD,EAAOM,eAIhC,QAKR,OACI,yBAAKJ,UAAU,UACTJ,I,cC0BHS,E,4MArDXC,MAAQ,CACJH,KAAM,KACNJ,IAAK,KACLK,aAAc,M,EAGlBG,aAAe,SAACC,GAKZ,EAAKC,SAAL,eACKD,EAAEE,OAAOR,GAAKM,EAAEE,OAAOC,S,EAKhCC,aAAe,SAACJ,GACZA,EAAEK,iBACFpB,QAAQC,IAAI,EAAKY,OACjB,EAAKd,MAAMsB,WAAW,EAAKR,Q,EAG/BS,UAAY,SAACjB,GAGTA,EAAOI,GAAGc,KAAKC,SAEf,IAAIC,EAAe,sBAAO,EAAKZ,MAAMa,cAAlB,CAAgCrB,IAEnD,EAAKW,SAAS,CACVU,aAAcD,K,uDAMlB,OACI,0BAAME,SAAUC,KAAKT,cACrB,2BAAOU,QAAQ,QAAf,QACA,2BAAOC,KAAK,OAAOrB,GAAG,OAAOsB,SAAUH,KAAKd,eAE5C,2BAAOe,QAAQ,OAAf,OACA,2BAAOC,KAAK,OAAOrB,GAAG,MAAMsB,SAAUH,KAAKd,eAE3C,2BAAOe,QAAQ,gBAAf,iBACA,2BAAOC,KAAK,OAAOrB,GAAG,eAAesB,SAAUH,KAAKd,eACpD,gD,GAhDYkB,aCsCTC,E,4MA3BbpB,MAAQ,CACNa,aAAc,CACZ,CAAChB,KAAM,UAAWJ,IAAK,GAAIK,aAAc,kBAAmBF,GAAI,GAChE,CAACC,KAAM,SAAUJ,IAAK,EAAG4B,YAAa,QAASzB,GAAI,GACnD,CAACC,KAAM,SAAUJ,IAAK,GAAIK,aAAa,UAAWF,GAAI,K,EAI1Da,UAAY,SAACjB,GACXL,QAAQC,IAAII,I,uDAIZ,OACE,yBAAKE,UAAU,OACb,gEACA,2CAIA,kBAAC,EAAD,CAAQL,cAAe0B,KAAKf,MAAMa,eAClC,kBAAC,EAAD,CAAWL,WAAYO,KAAKN,iB,GAvBlBU,aCCEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,a","file":"static/js/main.c27b12bd.chunk.js","sourcesContent":["import React from 'react';\r\n//when making a functional component, props must be passed in as an argument\r\nconst People = (props) => {\r\n\r\n    \r\n        // this gives me the value of props\r\n        console.log(props);\r\n        // use destructuring on props on line 9\r\n\r\n        const {arrayOfPeople} = props;\r\n\r\n        console.log(arrayOfPeople);\r\n        \r\n        const listOfPeoplehtml = arrayOfPeople.map(person => {\r\n            \r\n            return person.age > 25? (\r\n                <div className='person' key={person.id}>\r\n                    <div>Name: {person.name}</div>\r\n                    <div>Age: {person.age}</div>\r\n                    <div>Favorite Food: {person.favoriteFood}</div>\r\n                </div>\r\n\r\n                ) :\r\n                null\r\n            } \r\n        \r\n        )\r\n        \r\n        return(\r\n            <div className=\"people\">\r\n                { listOfPeoplehtml }\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\nexport default People;","import React, {Component} from 'react';\r\n\r\nclass AddPerson extends Component{\r\n    state = {\r\n        name: null,\r\n        age: null,\r\n        favoriteFood: null\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        // console.log(e.target.id)\r\n        // 1. this.setState takes an object as its value\r\n        // 2. We reuse this.setState() rather than this.state.name= because we want to return a new state. This is called non-mutation\r\n        // 3. I only need to pass in the property value pairs of state that I want upddated\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n        // console.log(this.state)\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        this.props.addMeLoser(this.state)\r\n    }\r\n\r\n    addPerson = (person) => {\r\n        //console.log(person)\r\n\r\n        person.id=Math.random();\r\n\r\n        let newListOfPeople = [...this.state.listOfPeople, person]\r\n\r\n        this.setState({\r\n            listOfPeople: newListOfPeople\r\n        })\r\n    }\r\n    \r\n\r\n    render () {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label htmlFor=\"name\">Name</label>\r\n            <input type=\"text\" id=\"name\" onChange={this.handleChange} />\r\n\r\n            <label htmlFor=\"age\">Age</label>\r\n            <input type=\"text\" id=\"age\" onChange={this.handleChange} />\r\n\r\n            <label htmlFor=\"favoriteFood\">Favorite Food</label>\r\n            <input type=\"text\" id=\"favoriteFood\" onChange={this.handleChange} />\r\n            <button>Submit!</button>\r\n            </form>\r\n                )\r\n    }\r\n}\r\n\r\nexport default AddPerson","// Below is the import for the functional components\n// import react from 'react';\n\n//import for class components\nimport React, { Component } from 'react';\n//import people from people\nimport People from './people';\n\nimport AddPerson from './addPerson';\n\n\nclass App extends Component{\n  \n  state = {\n    listOfPeople: [\n      {name: \"KaiHhhA\", age: 76, favoriteFood: \"Chicken nuggets\", id: 1},\n      {name: \"Austin\", age: 2, favoritFood: \"Nasty\", id: 2},\n      {name: \"DeeJay\", age: 28, favoriteFood:\"Burrito\", id: 3}\n    ]\n  }\n\n  addPerson = (person) => {\n    console.log(person)\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <h1>Jamie isn't like the other girlz</h1>\n        <p>Howdy y'all!</p>\n        {/* importing the people component into JSX */}\n        {/* We pass data from one component to another with props */}\n        {/* We pass props by giving our components attributes */}\n        <People arrayOfPeople={this.state.listOfPeople} />\n        <AddPerson addMeLoser={this.addPerson} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}